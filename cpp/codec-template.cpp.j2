{% macro encode_var_sized(param, is_final) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        msg.set{% if is_var_sized_list_contains_nullable(param.type)%}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}({{ param.name }}{% if is_final %}, true{% endif %});
{#
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param.name }}, {{ key_type(lang_name, param.type) }}Codec::encode, {{ value_type(lang_name, param.type) }}Codec::encode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param.name }}, {{ key_type(lang_name, param.type) }}Codec::encode, {{ value_type(lang_name, param.type) }}Codec::encode)
#}
    {%- else -%}
            msg.set{% if param.nullable  %}Nullable{% endif %}({{ param.name }}{% if is_final %}, true{% endif %});
    {% endif %}
{%- endmacro %}
{% macro decode_var_sized(param) -%}
    {%- if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        {% if param.nullable  %}boost::optional<{% endif %}{{ lang_types_decode(param.type) }}{% if param.nullable  %}>{% endif %} {{ param.name }} = msg.get{% if is_var_sized_list_contains_nullable(param.type)%}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}<{{ lang_types_decode(param.type) }}>();
{#
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.decode{% if param.nullable  %}Nullable{% endif %}(iterator, {{ key_type(lang_name, param.type) }}Codec::decode, {{ value_type(lang_name, param.type) }}Codec::decode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.decode{% if param.nullable  %}Nullable{% endif %}(iterator, {{ key_type(lang_name, param.type) }}Codec::decode, {{ value_type(lang_name, param.type) }}Codec::decode)
#}
    {%- else -%}
        {% if param.nullable %}boost::optional<{% endif %}{{ lang_types_decode(param.type) }}{% if param.nullable %}>{% endif %} {{ param.name }} = msg.get{% if param.nullable  %}Nullable{% endif %}<{{ lang_types_decode(param.type) }}>();
    {%- endif -%}
{%- endmacro %}
{% set request_fix_sized_params = fixed_params(method.request.params) %}
{% set request_var_sized_params = var_size_params(method.request.params) %}
{% set response_fix_sized_params = fixed_params(method.response.params) %}
{% set response_var_sized_params = var_size_params(method.response.params) %}
                ClientMessage {{ service_name.lower() }}_{{ method.name.lower() }}_encode({% for param in method.request.params %}const {{ lang_types_encode(param.type) }}{% if param.nullable and param.type != "UUID" %} *{% else %} &{% endif %}{{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
                    size_t initial_frame_size = ClientMessage::REQUEST_HEADER_LEN {% for param in request_fix_sized_params %} + {{ get_size(param.type) }}{% endfor %};
                    ClientMessage msg(initial_frame_size{% if request_var_sized_params|length == 0 %}, true{% endif %});
                    msg.setRetryable({{ method.request.retryable|lower }});
                    msg.setOperationName("{{ service_name|capital }}.{{ method.name|capital }}");

                    msg.setMessageType(static_cast<int32_t>({{ method.request.id }}));

                {% for param in request_fix_sized_params %}
                    msg.set({{ param.name }});
                {% endfor %}
                {% for i in range(0, request_var_sized_params|length ) %}
                    {{ encode_var_sized(request_var_sized_params[i], i == (request_var_sized_params|length - 1) ) }}
                {% endfor %}
                    return msg;
                }

                {# EVENTS#}
                {% if method.events|length != 0 %}
                void {{ service_name.lower() }}_{{ method.name.lower() }}_handler::handle(ClientMessage &msg) {
                    auto messageType = msg.getMessageType();
                {% for event in method.events%}
                    if (messageType == {{ event.id }}) {
                        {% if fixed_params(event.params)|length > 0 %}
                        auto *initial_frame = reinterpret_cast<ClientMessage::frame_header_t *>({% endif %}{% if fixed_params(event.params)|length == 0 %}                        {% endif %}msg.rd_ptr(ClientMessage::RESPONSE_HEADER_LEN){% if fixed_params(event.params)|length > 0 %}){% endif %};
                        {% for param in fixed_params(event.params) %}
                        {{ lang_types_encode(param.type) }} {{ param.name }} = msg.get<{{ lang_types_decode(param.type) }}>();
                        {% endfor %}
                        {% if fixed_params(event.params)|length > 0 %}
                        auto remaining_initial_frame_bytes = initial_frame->frame_len - ClientMessage::RESPONSE_HEADER_LEN;
                        remaining_initial_frame_bytes -= ({% for param in fixed_params(event.params) %}{{ get_size(param.type) }}{% if not loop.last %} + {% endif %}{% endfor %});
                        // skip any remaining bytes to the end of the frame
                        msg.rd_ptr(remaining_initial_frame_bytes);
                        {% endif %}

                        {% for param in var_size_params(event.params) %}
                        {{ decode_var_sized(param) }}
                        {% endfor %}
                        handle_{{ event.name.lower() }}({% for param in event.params %}{{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %});
                        return;
                    }
                {% endfor %}
                    getLogger()->warning(
                          "[{{ service_name.lower() }}_{{ method.name.lower() }}_handler::handle] Unknown message type (",
                          messageType, ") received on event handler.");
                }

                {% endif %}

